import { Injectable } from '@nestjs/common'
import { InjectRepository } from '@nestjs/typeorm'
import { ResultData } from 'src/common/utils/result'
import { Repository } from 'typeorm'
import { Create${BusinessName}Dto, List${BusinessName}Dto, Update${BusinessName}Dto } from './${businessName}.dto'
import { ${BusinessName}Entity } from './${businessName}.entity'

@Injectable()
export class ${BusinessName}Service {
  constructor(
    @InjectRepository(${BusinessName}Entity)
    private readonly ${businessName}EntityRep: Repository<${BusinessName}Entity>,
  ) {}

  async create(create${BusinessName}Dto: Create${BusinessName}Dto) {
    const res = await this.${businessName}EntityRep.save(create${BusinessName}Dto)
    return ResultData.ok(res)
  }

  async findAll(query: List${BusinessName}Dto) {
    const entity = this.${businessName}EntityRep.createQueryBuilder('entity')

    entity.where('entity.delFlag = :delFlag', { delFlag: '0' })

#foreach($column in $columns)
  #if($column.isQuery == '1')
    #if($column.queryType.toLowerCase() == 'like')
    if (query.${column.javaField}) {
      entity.andWhere('entity.${column.javaField} like :${column.javaField}', { ${column.javaField}: `%\${query.${column.javaField}}%` })
    }
    #elseif($column.queryType.toLowerCase() == 'eq')
    if (query.${column.javaField}) {
      entity.andWhere('entity.${column.javaField} = :${column.javaField}', { ${column.javaField}: query.${column.javaField} })
    }
    #elseif($column.queryType.toLowerCase() == 'between')
    if (query.${column.javaField} && query.${column.javaField}.length === 2) {
      entity.andWhere('entity.${column.javaField} between :${column.javaField}0 and :${column.javaField}1', {
        ${column.javaField}0: query.${column.javaField}[0],
        ${column.javaField}1: query.${column.javaField}[1],
      })
    }
    #elseif($column.queryType.toLowerCase() == 'ne')
    if (query.${column.javaField}) {
      entity.andWhere('entity.${column.javaField} != :${column.javaField}', { ${column.javaField}: query.${column.javaField} })
    }
    #elseif($column.queryType.toLowerCase() == 'gt')
    if (query.${column.javaField}) {
      entity.andWhere('entity.${column.javaField} > :${column.javaField}', { ${column.javaField}: query.${column.javaField} })
    }
    #elseif($column.queryType.toLowerCase() == 'lt')
    if (query.${column.javaField}) {
      entity.andWhere('entity.${column.javaField} < :${column.javaField}', { ${column.javaField}: query.${column.javaField} })
    }
    #elseif($column.queryType.toLowerCase() == 'ge')
    if (query.${column.javaField}) {
      entity.andWhere('entity.${column.javaField} >= :${column.javaField}', { ${column.javaField}: query.${column.javaField} })
    }
    #elseif($column.queryType.toLowerCase() == 'le')
    if (query.${column.javaField}) {
      entity.andWhere('entity.${column.javaField} <= :${column.javaField}', { ${column.javaField}: query.${column.javaField} })
    }
    #end
  #end
#end

    entity.skip(query.pageSize * (query.pageNum - 1)).take(query.pageSize)
    const [list, total] = await entity.getManyAndCount()

    return ResultData.ok({
      list,
      total,
    })
  }

  async findOne(id: number) {
    const res = await this.${businessName}EntityRep.findOne({
      where: { delFlag: '0', ${primaryKey}: id, },
    })
    return ResultData.ok(res)
  }

  async update(update${BusinessName}Dto: Update${BusinessName}Dto) {
    const res = await this.${businessName}EntityRep.update(
      { ${primaryKey}: update${BusinessName}Dto.${primaryKey} },
      update${BusinessName}Dto,
    )
    return ResultData.ok(res)
  }

  async remove(id: number) {
    const data = await this.${businessName}EntityRep.update(
      { ${primaryKey}: id },
      { delFlag: '1' }
    )
    return ResultData.ok(data)
  }
}
